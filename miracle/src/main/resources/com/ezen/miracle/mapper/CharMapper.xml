<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ezen.miracle.mapper.CharMapper">

	<select id="charAll"
		resultType="com.ezen.miracle.dto.LogoCharDTO">
		select allrank.* from(select rownum as levelrank,
		mainrank.* from
		( select * from logo_char order by char_level desc)
		mainrank) allrank
	</select>

	<select id="charSelectedServer"
		resultType="com.ezen.miracle.dto.LogoCharDTO">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select * from logo_char where char_server =
		#{char_server} order by
		char_level desc) mainrank) allrank


	</select>

	<select id="charSelectedClass"
		resultType="com.ezen.miracle.dto.LogoCharDTO">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select * from logo_char where char_class =
		#{char_class} order by
		char_level desc) mainrank) allrank

	</select>

	<select id="charSelectedClassNServer"
		resultType="com.ezen.miracle.dto.LogoCharDTO">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select * from logo_char where char_class =
		#{char_class} and
		char_server = #{char_server} order by char_level
		desc) mainrank)
		allrank


	</select>

	<insert id="charSearchInsert">
		MERGE INTO logo_char
		USING dual
		ON (char_name =
		#{char_name})
		WHEN MATCHED THEN
		UPDATE SET char_level = #{char_level}
		,char_class = #{char_class},
		char_server = #{char_server},
		char_guild =
		#{char_guild}, char_equipset = #{char_equipSet}, char_classeng =
		#{char_classEng}
		WHEN NOT MATCHED THEN
		INSERT (char_name, char_level,
		char_class, char_server,
		char_guild, char_equipset,char_classeng)
		VALUES
		(#{char_name},#{char_level},#{char_class},#{char_server},#{char_guild},#{char_equipSet},#{char_classEng})

	</insert>

	<select id="levelCut">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select *
		from logo_char where char_level between 1300 and #{char_level} order
		by char_level desc) mainrank) allrank

	</select>
	<select id="charSelectedServerNlevelCut">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select *
		from logo_char where char_level between 1300 and #{char_level} and
		char_server = #{char_server} order by char_level desc) mainrank)
		allrank
	</select>

	<select id="charSelectedClassNlevelCut">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select *
		from logo_char where char_level between 1300 and #{char_level} and
		char_class = #{char_class} order by char_level
		desc) mainrank)
		allrank
	</select>

	<select id="allSearch">
		select allrank.* from
		(select rownum as levelrank,
		mainrank.* from
		( select *
		from logo_char where char_level between 1300 and #{char_level} and
		char_server = #{char_server} and char_class = #{char_class} order by
		char_level
		desc) mainrank)
		allrank

	</select>


</mapper>