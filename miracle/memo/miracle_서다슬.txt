1 인클루드 헤더 푸터

1-1 검색창
- 입력받은 데이터를 파라미터로 전송한 후 로아 api에서 해당 데이터에 해당하는 특정 데이터를 불러와서 다음뷰에 활용함
	a. 파라미터 활용에 대해 설명 jsp -> js 는 가능하고 js -> jsp 는 불가능

1-2 로그인
- 디스코드 Ouath2 인증방식을 사용해 디스코드에서 넘겨주는 정보를 활용해 DB에 회원정보를 저장함
	a. Ouath2 인증 메커니즘 설명
	b. DB 데이터 입력 및 업데이트를 위해 사용한 merge into 쿼리문 설명

- 디스코드에서 받아온 데이터를 세션에 저장해 활용
	a. 데이터에 따라 비회원 일반회원 관리자의 등급을 부여(기능차이 있음)
	b. 데이터를 모든 뷰에서 활용 가능하도록 헤더에서 변수화
	c. 모든 세션정보를 즉시 삭제하는 메서드를 활용해 로그아웃 구현

2 메인화면

2-1 슬라이드 배너
- 최근 업데이트나 이벤트를 슬라이드형식으로 보여주고 클릭시 해당정보가 있는 공식홈페이지로 이동
	a. 슬라이드 구현방법 설명 및 간단평

2-2 달력, 타이머
- 10일치 달력을 구현(api 정보 업데이트 주기가 7일임 수~화)
	a. getMonth() 메서드는 1월에서 12월을 0~11로 리턴함 getDay() 메서드는 일~토를 0~6으로 리턴
	b. 과거와 미래의 시간 구현, 미래를 구현할 때 생기는 문제점

2-3 로스트아크 API를 활용해 데이터 정리
- 정보를 받아오는 방법
	a. 로아 개발자 api 사이트에서 인증을 통해 키를 받고
	b. 그 키를 사용해 로아측에서 알려주는 방법을 통해 데이터를 받아옴
	c. json 타입의 데이터를 필요한 부분만 선택적으로 활용

3 게시판

3-1 게시글
	a. 게시글 작성 및 삭제 조건
	b. 글 작성 및 수정시 작성자의 정보와 글의 정보를 DB에 저장
	c. 글 삭제시 DB에 데이터는 유지, 기본값이 1인 컬럼을 0으로 수정해 쿼리문으로 걸러지게함
	d. 생성되고 5초 후 삭제되는 쿠키를 활용해 조회수를 구현
	e. 세션에 저장된 정보와 DB에 저장된 게시글의 정보를 비교해 일치한 경우에만 수정 및 삭제가 가능

3-2 댓글
- 댓글 작성 및 삭제 조건
	a. 댓글 작성시 세션을 통해 회원의 정보를 받아 등급에 따라 작성가능
	b. 세션의 정보와 DB 댓글 테이블에 저장된 데이터를 비교해 일치할 경우 삭제가능
	c. 삭제시 DB에 데이터는 남아있고 컬럼을 수정해 게시판에서 보이지 않게함

3-3 페이징
- 페이징에 대한 전반적인 설명
	a. VO와 DTO의 차이
	b. 페이지를 나타내는 그룹에 대한 VO가 추가로 필요, 해당 VO에 저장되는 데이터에 대한 이해
	c. 설정한 VO 활용
4 백엔드

4-1 컨트롤러, 서비스, 매퍼
- 

4-2 폼, 라이브러리 등 초기설정
- Log4j : 로그 보여줌, 문제가 생겼을 때 어디서 왜 생겼는지 파악하는데 사용함
	a. pom.xml에 의존성 추가

- Log4jdbc : jdbc에 관한 로그를 보여줌, DB관련 오류에 대해 구체적으로 알려줌 
	a. pom.xml에 의존성 추가
	b. src/main/resources 에 properties 추가

- mybatis : 이름이 같은 파라미터와 매개변수 컬럼을 바인딩해줘서 사용하기 편함
	a. pom.xml에 의존성 추가(spring.jdbc/mybatis/mybatis-spring 이렇게 3개)
	b. root-context.xml > namespaces 에서 mybatis-spring을 체크해줌
	c. mybatis는 한번에 하나의 파라미터만 바인딩함 다른건 @param 으로 이어줘야함

- lombok : 데이터 처리를 편하게 해줌 게터세터생성자 등을 만들어줌
	a. pom.xml에 의존성 추가
	b. @Data 등 어노테이션으로 활용

- hikariCP : Database Connection Pool 의 하나로 DB 연결을 효율적으로 관리해줌
	a. pom.xml에 의존성 추가
	b. hikariCP 깃허브에 써있는 설명을 보고 root-context.xml 에 사용하는 코드를 추가

- jquery : JS를 좀더 효율적으로 사용할 수 있음
	a. 그냥 검색해서 다운받고 jsp에서 해당 js파일을 연결해주면됨
	b. 현재 프로젝트에서는 헤더에 연결해 모든 곳에서 사용할 수 있게 해둠

- servlet-context.xml 에서 resources mapping 을 통해 서블릿에서 특정 폴더로 가는 경로를 열어줌
	a. <resources mapping="/resources/**" location="/resources/" />

- encodingFilter 
	a. 한글이 나오게끔 인코딩하는 필터가 필요함
	b. 걍 구글검색하면 나옴 web.xml 에 추가
